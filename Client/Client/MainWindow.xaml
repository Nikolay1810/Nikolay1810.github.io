<Window x:Class="Client.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local ="clr-namespace:Client.AddBinding"
        xmlns:k="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        xmlns:i ="http://schemas.microsoft.com/expression/2010/interactivity"
        mc:Ignorable="d"
        Title="Тестовое задание" Height="427" Width="534"
        Background="#A50AA5"
        >
    <!--<Window.Background>
        <ImageBrush ImageSource="Images/background1.jpg" Stretch="UniformToFill"></ImageBrush>
    </Window.Background>-->
    <Window.Resources>
        <Style TargetType="Button">
            <Style.Setters>
                <Setter Property="Background" Value="Black"/>
                <Setter Property="Foreground" Value="White"/>
            </Style.Setters>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="White"/>
                    <Setter Property="Foreground" Value="Black"/>
                    <Setter Property="Cursor" Value="Hand"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="TabItem">
            <Style.Setters>
                <Setter Property="Background" Value="Black"/>
                <Setter Property="Foreground" Value="White"/>
            </Style.Setters>
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="White"/>
                    <Setter Property="Foreground" Value="Black"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Cursor" Value="Hand"/>
                    <Setter Property="Background" Value="White"/>
                    <Setter Property="Foreground" Value="Black"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <SolidColorBrush x:Key="TextBox.Static.Border" Color="#FFABAdB3"/>
        <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA"/>
        <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5"/>
        <Style TargetType="{x:Type TextBox}">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            <Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="AllowDrop" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border x:Name="border" CornerRadius="10,10,10,10" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/>
                                <Setter Property="Cursor" Value="Pen"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                </MultiTrigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="LightGray"/>
                    <Setter Property="Cursor" Value="Pen"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type PasswordBox}">
            <Setter Property="PasswordChar" Value="●"/>
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            <Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="AllowDrop" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type PasswordBox}">
                        <Border x:Name="border" CornerRadius="10" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/>
                                <Setter Property="Cursor" Value="Pen"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>
        <ControlTemplate x:Key="ButtonBaseControlTemplate1" TargetType="{x:Type ButtonBase}">
            <Border x:Name="border" CornerRadius="10" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="Button.IsDefaulted" Value="True">
                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
                </Trigger>
                <Trigger Property="ToggleButton.IsChecked" Value="True">
                    <Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="ButtonBaseControlTemplate2" TargetType="{x:Type ButtonBase}">
            <Border x:Name="border" CornerRadius="10" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="Button.IsDefaulted" Value="True">
                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
                </Trigger>
                <Trigger Property="ToggleButton.IsChecked" Value="True">
                    <Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </Window.Resources>

    <TabControl Name="panel" Background="Transparent">

        <TabItem Name="authorization">
            <TabItem.Header>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Margin="3">Авторизация</TextBlock>
                </StackPanel>
            </TabItem.Header>
            <TabItem.Content>
                <StackPanel>
                    <Grid Height="315" Background="Transparent">

                        <Label Margin="43,86,248,164" Content="Введите логин" Foreground="White" FontWeight="Bold"/>
                        <TextBox x:Name="login" Text="{Binding Path=AuthorizeData.Login, UpdateSourceTrigger=PropertyChanged}"  HorizontalAlignment="Left" Height="23" Margin="228,86,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="165"/>
                        <Label Margin="43,128,298,122" Content="Введите пароль" Foreground="White" FontWeight="Bold"/>
                        <PasswordBox x:Name="passwd"  HorizontalAlignment="Left" Height="23"  Margin="228,128,0,0" VerticalAlignment="Top" Width="165">
                            <i:Interaction.Behaviors>
                                <local:DependencyPropertyBehavior
                                    UpdateEvent="PasswordChanged"
                                    Property="Password"
                                    Binding="{Binding AuthorizeData.Password, UpdateSourceTrigger=PropertyChanged}"/>
                            </i:Interaction.Behaviors>
                        </PasswordBox>
                        <!--log_Click-->
                        <Button x:Name="log" Content="Вход" Cursor="Hand" FontWeight="Bold" HorizontalAlignment="Left" Margin="318,178,0,0" VerticalAlignment="Top" Width="81"  Command="{Binding LogIn}" Template="{DynamicResource ButtonBaseControlTemplate1}" Height="29">
                            <Button.Resources>
                                <ControlTemplate x:Key="ButtonBaseControlTemplate1" TargetType="{x:Type ButtonBase}">
                                    <Border x:Name="border" CornerRadius="10" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" d:DesignWidth="126.5" d:DesignHeight="44">
                                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="Button.IsDefaulted" Value="True">
                                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>
                                            <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>
                                        </Trigger>
                                        <Trigger Property="IsPressed" Value="True">
                                            <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                                            <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
                                        </Trigger>
                                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                                            <Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                                            <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                                            <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Button.Resources>
                        </Button>
                        <TextBlock x:Name="registr" HorizontalAlignment="Left" Margin="228,189,0,0" TextWrapping="Wrap" VerticalAlignment="Top"><Hyperlink  Name="link" Command="{Binding ClickRegisterCommand}" Foreground="White" FontWeight="Bold" Cursor="Hand"><Run Text="Регистрация"/></Hyperlink></TextBlock>
                    </Grid>
                </StackPanel>
            </TabItem.Content>
        </TabItem>
        <TabItem Name="registration" IsSelected="{Binding IsRegister, UpdateSourceTrigger=PropertyChanged}">
            <TabItem.Header>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Margin="3">Регистрация</TextBlock>
                </StackPanel>
            </TabItem.Header>
            <TabItem.Content>
                <StackPanel>
                    <Grid Height="351" >

                        <Label x:Name="page2label" Content="Заполните форму" Foreground="White" FontWeight="Bold" FontSize="13" HorizontalAlignment="Left" Margin="3,10,0,0" VerticalAlignment="Top" Height="30" Width="149"/>
                        <Label x:Name="label" Content="Имя" Foreground="White" FontWeight="Bold" HorizontalAlignment="Left" Margin="26,40,0,0" VerticalAlignment="Top" Height="26" Width="50"/>
                        <TextBox x:Name="firstName" Text="{Binding Path=CurrentUser.FirstName, UpdateSourceTrigger=PropertyChanged}"  HorizontalAlignment="Left" Height="23" Margin="176,44,0,0" TextWrapping="Wrap"  VerticalAlignment="Top" Width="149" Grid.Column="1"/>
                        <Label x:Name="label1" Content="Фамилия" Foreground="White" FontWeight="Bold" HorizontalAlignment="Left" Margin="26,86,0,0" VerticalAlignment="Top" Height="26" Width="80"/>
                        <TextBox x:Name="lastName" Text="{Binding Path=CurrentUser.LastName, UpdateSourceTrigger=PropertyChanged}"  HorizontalAlignment="Left" Height="23" Margin="176,89,0,0" TextWrapping="Wrap"  VerticalAlignment="Top" Width="149" Grid.Column="1"/>
                        <Label x:Name="label2" Content="Email" Foreground="White" FontWeight="Bold" HorizontalAlignment="Left" Margin="26,132,0,0" VerticalAlignment="Top" Height="26" Width="50"/>
                        <TextBox x:Name="email" Text="{Binding Path=CurrentUser.Email, UpdateSourceTrigger=PropertyChanged}"  HorizontalAlignment="Left" Height="23" Margin="176,136,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="149" Grid.Column="1"/>
                        <Label x:Name="label3" Content="Путь к фото" Foreground="White" FontWeight="Bold" HorizontalAlignment="Left" Margin="26,177,0,0" VerticalAlignment="Top" Height="26" Width="96"/>
                        <TextBox x:Name="imageUrl" IsEnabled="False" Text="{Binding Path=CurrentUser.AvatarPath, UpdateSourceTrigger=PropertyChanged}"  HorizontalAlignment="Left" Height="23" Margin="176,181,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="149" Grid.Column="1"/>
                        <Button x:Name="selectUrl" FontWeight="Bold" Content="Выбрать" HorizontalAlignment="Left" Margin="346,178,0,0" VerticalAlignment="Top" Width="94" Command="{Binding UpdateAvatarPath}" Height="28" Template="{DynamicResource ButtonBaseControlTemplate1}"/>
                        <Label x:Name="label4" Content="Логин" Foreground="White" FontWeight="Bold" HorizontalAlignment="Left" Margin="26,220,0,0" VerticalAlignment="Top" Height="26" Width="58"/>
                        <TextBox x:Name="restrLog" Text="{Binding Path=CurrentUser.Logins, UpdateSourceTrigger=PropertyChanged}"  HorizontalAlignment="Left" Height="23" Margin="176,224,0,0" TextWrapping="Wrap"  VerticalAlignment="Top" Width="149" Grid.Column="1"/>
                        <Label x:Name="label5" Content="Пароль" Foreground="White" FontWeight="Bold"  HorizontalAlignment="Left" Margin="26,260,0,0" VerticalAlignment="Top" Height="26" Width="66"/>
                        <PasswordBox x:Name="password"  HorizontalAlignment="Left" Height="23" Margin="176,263,0,0"  VerticalAlignment="Top" Width="149" Grid.Column="1">
                            <i:Interaction.Behaviors>
                                <local:DependencyPropertyBehavior
                                    UpdateEvent="PasswordChanged"
                                    Property="Password"
                                    Binding="{Binding CurrentUser.Passwords}"/>
                            </i:Interaction.Behaviors>
                        </PasswordBox>
                        <Button x:Name="button" Command="{Binding AddUser}" HorizontalAlignment="Left" Margin="176,302,0,0" VerticalAlignment="Top" Width="142" Height="33" Template="{DynamicResource ButtonBaseControlTemplate2}">Зарегестрировать</Button>

                    </Grid>
                </StackPanel>
            </TabItem.Content>
        </TabItem>
        <TabItem Name="account" IsEnabled="{Binding IsEnable, UpdateSourceTrigger=PropertyChanged}" IsSelected="{Binding IsEnable, UpdateSourceTrigger=PropertyChanged}">
            <TabItem.Header>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Margin="3">Аккаунт</TextBlock>
                </StackPanel>
            </TabItem.Header>
            <TabItem.Content>
                <StackPanel Margin="0,-4,0,4">
                    <Grid Height="352">
                        <Image x:Name="image" Source="{Binding Path=CurrentUser.AvatarPath, UpdateSourceTrigger=PropertyChanged}"  Margin="20,32,332,139"/>
                        <TextBox x:Name="accountName" Text="{Binding Path=CurrentUser.FirstName, UpdateSourceTrigger=PropertyChanged}" BorderBrush="Transparent" Height="24" TextWrapping="Wrap" Margin="370,-250,20,0"/>
                        <TextBox x:Name="accountLastName" Text="{Binding Path=CurrentUser.LastName, UpdateSourceTrigger=PropertyChanged}" BorderBrush="Transparent" Height="24" TextWrapping="Wrap" Margin="210,-250,160,0"/>
                        <TextBox x:Name="accountEmail" Text="{Binding Path=CurrentUser.Email, UpdateSourceTrigger=PropertyChanged}" BorderBrush="Transparent" Height="24" TextWrapping="Wrap" Margin="210,-160,100,0"/>
                        <TextBox x:Name="accountLogin" Text="{Binding Path=CurrentUser.Logins, UpdateSourceTrigger=PropertyChanged}" BorderBrush="Transparent" Height="24" TextWrapping="Wrap" Margin="210,-60,100,0"/>
                        <TextBox x:Name="accountPass" Visibility="{Binding ShowPassword, UpdateSourceTrigger=PropertyChanged}" Text="{Binding Path=CurrentUser.Passwords, UpdateSourceTrigger=PropertyChanged}" BorderBrush="Transparent" Height="24" Margin="210,184,104,144"/>
                        <PasswordBox x:Name="accountPassword" Visibility="{Binding HiddenPasswordBox, UpdateSourceTrigger=PropertyChanged}" BorderBrush="Transparent"  Height="24"  Margin="210,40,99,0">
                            <i:Interaction.Behaviors>
                                <local:DependencyPropertyBehavior
                                    UpdateEvent="PasswordChanged"
                                    Property="Password"
                                    Binding="{Binding CurrentUser.Passwords, UpdateSourceTrigger=PropertyChanged}"/>
                            </i:Interaction.Behaviors>
                        </PasswordBox>
                        <Button x:Name="updateButton" Content="Обновить" Foreground="White" FontWeight="Bold" HorizontalAlignment="Left" Margin="308,263,0,0" VerticalAlignment="Top" Width="138" Height="37" Command="{Binding UpdateCurrentUser}" Template="{DynamicResource ButtonBaseControlTemplate1}"/>
                        <Button x:Name="showPass" Background="Transparent" Content="0" HorizontalAlignment="Left" Margin="389,184,0,0" VerticalAlignment="Top" Width="31" Height="24">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="MouseDown">
                                    <i:InvokeCommandAction Command="{Binding MouseDownCommand}"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="MouseUp">
                                    <i:InvokeCommandAction Command="{Binding MouseUpCommand}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Button>
                        <TextBox x:Name="updatePath" Visibility="Hidden" HorizontalAlignment="Left" Height="22" Margin="38,232,0,0" TextWrapping="Wrap" Text="{Binding Path=CurrentUser.AvatarPath, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Top" Width="120"/>
                        <Button x:Name="updatePhoto" Foreground="White" FontWeight="Bold" Content="Обновить фото" HorizontalAlignment="Left" Margin="38,267,0,0" VerticalAlignment="Top" Width="114" Command="{Binding UpdateAvatarPath}" Template="{DynamicResource ButtonBaseControlTemplate1}" Height="35"/>
                        <TextBox x:Name="accountId" Text="{Binding Path=CurrentUser.Id, UpdateSourceTrigger=PropertyChanged}" Visibility="Hidden" HorizontalAlignment="Left" Height="22" Margin="38,306,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="120"/>
                    </Grid>
                </StackPanel>
            </TabItem.Content>
        </TabItem>
    </TabControl>
</Window>
